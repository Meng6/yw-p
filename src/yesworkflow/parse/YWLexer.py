# Generated from YW.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,166,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,0,1,0,1,0,1,0,3,0,46,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,3,1,60,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,72,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,82,8,3,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,94,8,4,1,5,1,5,1,5,1,5,1,5,1,5,3,
        5,102,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,112,8,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,126,8,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,3,8,136,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
        12,1,13,1,13,1,14,1,14,1,15,3,15,151,8,15,1,15,1,15,1,16,1,16,1,
        17,4,17,158,8,17,11,17,12,17,159,1,18,4,18,163,8,18,11,18,12,18,
        164,1,164,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,1,0,2,2,0,9,9,
        32,32,6,0,46,46,48,57,65,90,92,92,95,95,97,122,177,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,45,1,0,0,0,3,59,1,0,0,0,5,71,
        1,0,0,0,7,81,1,0,0,0,9,93,1,0,0,0,11,101,1,0,0,0,13,111,1,0,0,0,
        15,125,1,0,0,0,17,135,1,0,0,0,19,137,1,0,0,0,21,139,1,0,0,0,23,141,
        1,0,0,0,25,143,1,0,0,0,27,145,1,0,0,0,29,147,1,0,0,0,31,150,1,0,
        0,0,33,154,1,0,0,0,35,157,1,0,0,0,37,162,1,0,0,0,39,40,5,64,0,0,
        40,41,5,97,0,0,41,46,5,115,0,0,42,43,5,64,0,0,43,44,5,65,0,0,44,
        46,5,83,0,0,45,39,1,0,0,0,45,42,1,0,0,0,46,2,1,0,0,0,47,48,5,64,
        0,0,48,49,5,98,0,0,49,50,5,101,0,0,50,51,5,103,0,0,51,52,5,105,0,
        0,52,60,5,110,0,0,53,54,5,64,0,0,54,55,5,66,0,0,55,56,5,69,0,0,56,
        57,5,71,0,0,57,58,5,73,0,0,58,60,5,78,0,0,59,47,1,0,0,0,59,53,1,
        0,0,0,60,4,1,0,0,0,61,62,5,64,0,0,62,63,5,100,0,0,63,64,5,101,0,
        0,64,65,5,115,0,0,65,72,5,99,0,0,66,67,5,64,0,0,67,68,5,68,0,0,68,
        69,5,69,0,0,69,70,5,83,0,0,70,72,5,67,0,0,71,61,1,0,0,0,71,66,1,
        0,0,0,72,6,1,0,0,0,73,74,5,64,0,0,74,75,5,101,0,0,75,76,5,110,0,
        0,76,82,5,100,0,0,77,78,5,64,0,0,78,79,5,69,0,0,79,80,5,78,0,0,80,
        82,5,68,0,0,81,73,1,0,0,0,81,77,1,0,0,0,82,8,1,0,0,0,83,84,5,64,
        0,0,84,85,5,102,0,0,85,86,5,105,0,0,86,87,5,108,0,0,87,94,5,101,
        0,0,88,89,5,64,0,0,89,90,5,70,0,0,90,91,5,73,0,0,91,92,5,76,0,0,
        92,94,5,69,0,0,93,83,1,0,0,0,93,88,1,0,0,0,94,10,1,0,0,0,95,96,5,
        64,0,0,96,97,5,105,0,0,97,102,5,110,0,0,98,99,5,64,0,0,99,100,5,
        73,0,0,100,102,5,78,0,0,101,95,1,0,0,0,101,98,1,0,0,0,102,12,1,0,
        0,0,103,104,5,64,0,0,104,105,5,111,0,0,105,106,5,117,0,0,106,112,
        5,116,0,0,107,108,5,64,0,0,108,109,5,79,0,0,109,110,5,85,0,0,110,
        112,5,84,0,0,111,103,1,0,0,0,111,107,1,0,0,0,112,14,1,0,0,0,113,
        114,5,64,0,0,114,115,5,112,0,0,115,116,5,97,0,0,116,117,5,114,0,
        0,117,118,5,97,0,0,118,126,5,109,0,0,119,120,5,64,0,0,120,121,5,
        80,0,0,121,122,5,65,0,0,122,123,5,82,0,0,123,124,5,65,0,0,124,126,
        5,77,0,0,125,113,1,0,0,0,125,119,1,0,0,0,126,16,1,0,0,0,127,128,
        5,64,0,0,128,129,5,117,0,0,129,130,5,114,0,0,130,136,5,105,0,0,131,
        132,5,64,0,0,132,133,5,85,0,0,133,134,5,82,0,0,134,136,5,73,0,0,
        135,127,1,0,0,0,135,131,1,0,0,0,136,18,1,0,0,0,137,138,5,34,0,0,
        138,20,1,0,0,0,139,140,5,39,0,0,140,22,1,0,0,0,141,142,7,0,0,0,142,
        24,1,0,0,0,143,144,5,47,0,0,144,26,1,0,0,0,145,146,5,123,0,0,146,
        28,1,0,0,0,147,148,5,125,0,0,148,30,1,0,0,0,149,151,5,13,0,0,150,
        149,1,0,0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,153,5,10,0,0,153,
        32,1,0,0,0,154,155,5,58,0,0,155,34,1,0,0,0,156,158,7,1,0,0,157,156,
        1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,36,1,
        0,0,0,161,163,9,0,0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,165,1,
        0,0,0,164,162,1,0,0,0,165,38,1,0,0,0,13,0,45,59,71,81,93,101,111,
        125,135,150,159,164,0
    ]

class YWLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AsKeyword = 1
    BeginKeyword = 2
    DescKeyword = 3
    EndKeyword = 4
    FileKeyword = 5
    InKeyword = 6
    OutKeyword = 7
    ParamKeyword = 8
    UriKeyword = 9
    DQ = 10
    SQ = 11
    SPACE = 12
    SLASH = 13
    LEFTBRACE = 14
    RIGHTBRACE = 15
    NEWLINE = 16
    COLON = 17
    WORD = 18
    OTHER = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\"'", "'''", "'/'", "'{'", "'}'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "AsKeyword", "BeginKeyword", "DescKeyword", "EndKeyword", "FileKeyword", 
            "InKeyword", "OutKeyword", "ParamKeyword", "UriKeyword", "DQ", 
            "SQ", "SPACE", "SLASH", "LEFTBRACE", "RIGHTBRACE", "NEWLINE", 
            "COLON", "WORD", "OTHER" ]

    ruleNames = [ "AsKeyword", "BeginKeyword", "DescKeyword", "EndKeyword", 
                  "FileKeyword", "InKeyword", "OutKeyword", "ParamKeyword", 
                  "UriKeyword", "DQ", "SQ", "SPACE", "SLASH", "LEFTBRACE", 
                  "RIGHTBRACE", "NEWLINE", "COLON", "WORD", "OTHER" ]

    grammarFileName = "YW.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


